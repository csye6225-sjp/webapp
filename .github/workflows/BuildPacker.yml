name: Build Packer Image

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    # branches:
    #   - main

jobs:
  build:
    
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials (Dev Account)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Zip the project
        run: npm run zip
      
      - name: Create GCP DEV Service Account Key JSON
        id: gcp-dev
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "gcp_dev_key.json"
          json: ${{ secrets.GCP_DEV_SERVICE_ACCOUNT_KEY }}

      - name: Build Packer Image
        id: packer
        env:
          PACKER_LOG: 1
        run: |
          cd packer
          packer init ubuntu-node.pkr.hcl
          AMI_ID=$(packer build -var aws_region=${{ secrets.AWS_REGION }} \
                        -var ami_users=${{ secrets.AMI_USERS }} \
                        -var "gcp_service_account_key_file_dev=$(pwd)/gcp_dev_key.json" \
                        ubuntu-node.pkr.hcl | grep -o 'ami-[a-zA-Z0-9]*' | tail -n1)
          echo "AMAZON_AMI_ID=${AMI_ID}" >> $GITHUB_ENV


      - name: Configure AWS credentials (Demo Account)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update Launch Template with Latest AMI
        run: |
          # Retrieve the Launch Template ID based on the tag "CSYE6225-Webapp-LaunchTemplate"
          LT_ID=$(aws ec2 describe-launch-templates --filters "Name=tag:Name,Values=CSYE6225-Webapp-LaunchTemplate" --query "LaunchTemplates[0].LaunchTemplateId" --output text)
          echo "Launch Template ID: $LT_ID"
          
          # Create a new launch template version with the updated ImageId
          NEW_VERSION=$(aws ec2 create-launch-template-version --launch-template-id $LT_ID \
            --launch-template-data "{\"ImageId\": \"${AMAZON_AMI_ID}\", \"InstanceType\": \"t2.micro\"}" \
            --query 'VersionNumber' --output text)
          echo "Created new launch template version: $NEW_VERSION"
          
        
      - name: Trigger Auto Scaling Instance Refresh
        id: asg-refresh
        run: |
          ASG_NAME=${{ secrets.AWS_DEMO_AUTO_SCALING_GROUP_NAME }}
          echo $ASG_NAME
          aws autoscaling start-instance-refresh --auto-scaling-group-name "$ASG_NAME" \
            --preferences '{"MinHealthyPercentage":100, "InstanceWarmup":60}'
          echo "Started instance refresh for ASG: $ASG_NAME"

      - name: Wait for Instance Refresh to Complete
        run: |
          ASG_NAME=${{ secrets.AWS_DEMO_AUTO_SCALING_GROUP_NAME }}
          # Poll every 30 seconds until instance refresh status is not in progress
          refresh_status="InProgress"
          while [ "$refresh_status" = "InProgress" ]; do
            echo "Waiting for instance refresh to complete..."
            sleep 30
            refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "$ASG_NAME" --query "InstanceRefreshes[0].Status" --output text)
            echo "Instance refresh status: $refresh_status"
          done
          if [ "$refresh_status" = "Successful" ]; then
            echo "Instance refresh completed successfully."
          else
            echo "Instance refresh failed with status: $refresh_status"
            exit 1
          fi
      
      - id: auth
        name: Authenticating GCP Dev Account
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_DEV_SERVICE_ACCOUNT_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # - name: Share Custom Image with DEMO Project
      #   run: |
      #     IMAGE_NAME=$(gcloud compute images list \
      #       --filter="name~^webapp-" \
      #       --sort-by=~creationTimestamp \
      #       --limit=1 \
      #       --format="value(name)")

      #     echo "Found image: ${IMAGE_NAME}"
          
      #     NEW_IMAGE_NAME="webapp-demo-$(date +%Y%m%d%H%M%S)"
      #     echo "Copying image as: ${NEW_IMAGE_NAME}"
          
      #     gcloud compute images create ${NEW_IMAGE_NAME} \
      #     --source-image=${IMAGE_NAME} \
      #     --source-image-project=${{ secrets.GCP_DEV_PROJECT_ID }} \
      #     --project=${{ secrets.GCP_DEMO_PROJECT_ID }}


      - name: Comment on PR with AMI ID
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            :tada: Congratulations! Your Amazon AMI has been built.
            **Amazon AMI ID:** ${{ env.AMAZON_AMI_ID }}
